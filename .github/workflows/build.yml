name: Build and Release Eloqua

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Build Vue app
      run: npm run build
      
    - name: Build Electron app
      run: npm run electron:dist
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: eloqua-${{ matrix.os }}
        path: dist-electron/
        
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Clean Up Existing Assets
      uses: actions/github-script@v6
      with:
        script: |
          try {
            console.log('Starting asset cleanup...');
            
            // Check if we have the right permissions
            if (!context.token) {
              console.log('No token available, skipping cleanup');
              return;
            }
            
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.GITHUB_REF_NAME
            });
            
            if (!release.data) {
              console.log('No release found, skipping cleanup');
              return;
            }
            
            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            });
            
            let cleanedCount = 0;
            for (const asset of assets.data) {
              if (["locale.pak", "Electron Framework", "snapshot_blob.bin", "v8_context_snapshot.bin"].includes(asset.name)) {
                console.log(`Deleting problematic asset: ${asset.name}`);
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: asset.id
                });
                cleanedCount++;
              }
            }
            console.log(`Asset cleanup completed. Cleaned ${cleanedCount} assets.`);
          } catch (error) {
            console.log('Asset cleanup failed (non-critical):', error.message);
            console.log('Continuing with release creation...');
          }
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Ensure Release Exists
      run: |
        set -e
        echo "Ensuring release $GITHUB_REF_NAME exists..."
        if ! gh release view "$GITHUB_REF_NAME" >/dev/null 2>&1; then
          gh release create "$GITHUB_REF_NAME" -t "Eloqua $GITHUB_REF_NAME" -n "Automated release"
        fi
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Upload Assets with Delays
      run: |
        set -euo pipefail
        # Wait for release to be fully created
        sleep 10
        
        # Upload each file with delays and retry logic
        find artifacts -type f -maxdepth 2 | while read -r file; do
          echo "Uploading $file..."
          
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts for $file"
            if gh release upload "${GITHUB_REF_NAME}" "$file" --clobber; then
              echo "Successfully uploaded $file"
              break
            else
              echo "Upload failed for $file (attempt $attempt)"
              if [ $attempt -eq $max_attempts ]; then
                echo "Failed to upload $file after $max_attempts attempts"
                exit 1
              fi
              attempt=$((attempt + 1))
              sleep 30
            fi
          done
          
          sleep 15
        done
      env:
        GH_TOKEN: ${{ github.token }}
